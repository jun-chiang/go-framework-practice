// Code generated by Kitex v0.6.2. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	usermodel "github.com/jun-chiang/go-framework-practice/kitex-client/kitex_gen/usermodel"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*usermodel.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"signIn":      kitex.NewMethodInfo(signInHandler, newUserServiceSignInArgs, newUserServiceSignInResult, false),
		"signUp":      kitex.NewMethodInfo(signUpHandler, newUserServiceSignUpArgs, newUserServiceSignUpResult, false),
		"getUserList": kitex.NewMethodInfo(getUserListHandler, newUserServiceGetUserListArgs, newUserServiceGetUserListResult, false),
		"getUserById": kitex.NewMethodInfo(getUserByIdHandler, newUserServiceGetUserByIdArgs, newUserServiceGetUserByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "usermodel",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func signInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usermodel.UserServiceSignInArgs)
	realResult := result.(*usermodel.UserServiceSignInResult)
	success, err := handler.(usermodel.UserService).SignIn(ctx, realArg.User)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserServiceSignInArgs() interface{} {
	return usermodel.NewUserServiceSignInArgs()
}

func newUserServiceSignInResult() interface{} {
	return usermodel.NewUserServiceSignInResult()
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usermodel.UserServiceSignUpArgs)
	realResult := result.(*usermodel.UserServiceSignUpResult)
	success, err := handler.(usermodel.UserService).SignUp(ctx, realArg.User)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserServiceSignUpArgs() interface{} {
	return usermodel.NewUserServiceSignUpArgs()
}

func newUserServiceSignUpResult() interface{} {
	return usermodel.NewUserServiceSignUpResult()
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*usermodel.UserServiceGetUserListResult)
	success, err := handler.(usermodel.UserService).GetUserList(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserListArgs() interface{} {
	return usermodel.NewUserServiceGetUserListArgs()
}

func newUserServiceGetUserListResult() interface{} {
	return usermodel.NewUserServiceGetUserListResult()
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usermodel.UserServiceGetUserByIdArgs)
	realResult := result.(*usermodel.UserServiceGetUserByIdResult)
	success, err := handler.(usermodel.UserService).GetUserById(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserByIdArgs() interface{} {
	return usermodel.NewUserServiceGetUserByIdArgs()
}

func newUserServiceGetUserByIdResult() interface{} {
	return usermodel.NewUserServiceGetUserByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SignIn(ctx context.Context, user *usermodel.User) (r bool, err error) {
	var _args usermodel.UserServiceSignInArgs
	_args.User = user
	var _result usermodel.UserServiceSignInResult
	if err = p.c.Call(ctx, "signIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignUp(ctx context.Context, user *usermodel.User) (r bool, err error) {
	var _args usermodel.UserServiceSignUpArgs
	_args.User = user
	var _result usermodel.UserServiceSignUpResult
	if err = p.c.Call(ctx, "signUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context) (r []*usermodel.User, err error) {
	var _args usermodel.UserServiceGetUserListArgs
	var _result usermodel.UserServiceGetUserListResult
	if err = p.c.Call(ctx, "getUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, id int64) (r *usermodel.User, err error) {
	var _args usermodel.UserServiceGetUserByIdArgs
	_args.Id = id
	var _result usermodel.UserServiceGetUserByIdResult
	if err = p.c.Call(ctx, "getUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
